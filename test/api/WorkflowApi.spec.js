/*
 * SmartCLIDE DB API
 * An API for accessing the SmartCLIDE database. (A Keycloak token is required, Authorization Bearer Token, for accessing the API outside the AWS cluster)
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SmartClideDbApi);
  }
}(this, function(expect, SmartClideDbApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SmartClideDbApi.WorkflowApi();
  });

  describe('(package)', function() {
    describe('WorkflowApi', function() {
      describe('deleteWorkflowItem', function() {
        it('should call deleteWorkflowItem successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteWorkflowItem call
          /*

          instance.deleteWorkflowItem(workflowId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getWorkflowItem', function() {
        it('should call getWorkflowItem successfully', function(done) {
          // TODO: uncomment, update parameter values for getWorkflowItem call and complete the assertions
          /*

          instance.getWorkflowItem(workflowId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SmartClideDbApi.Workflow);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getWorkflows', function() {
        it('should call getWorkflows successfully', function(done) {
          // TODO: uncomment getWorkflows call and complete the assertions
          /*

          instance.getWorkflows(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SmartClideDbApi.Workflow);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('patchWorkflowItem', function() {
        it('should call patchWorkflowItem successfully', function(done) {
          // TODO: uncomment, update parameter values for patchWorkflowItem call
          /*

          instance.patchWorkflowItem(body, workflowId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('postWorkflows', function() {
        it('should call postWorkflows successfully', function(done) {
          // TODO: uncomment, update parameter values for postWorkflows call
          /*

          instance.postWorkflows(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
