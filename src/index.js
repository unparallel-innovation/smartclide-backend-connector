/*
 * SmartCLIDE DB API
 * An API for accessing the SmartCLIDE database. (A Keycloak token is required, Authorization Bearer Token, for accessing the API outside the AWS cluster)
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from './ApiClient';
import {CiManager} from './model/CiManager';
import {Deployment} from './model/Deployment';
import {DeploymentPlatform} from './model/DeploymentPlatform';
import {Error} from './model/Error';
import {ErrorError} from './model/ErrorError';
import {GitCredentials} from './model/GitCredentials';
import {Service} from './model/Service';
import {ServiceRegistry} from './model/ServiceRegistry';
import {Team} from './model/Team';
import {User} from './model/User';
import {Workflow} from './model/Workflow';
import {CiManagerApi} from './api/CiManagerApi';
import {DeploymentApi} from './api/DeploymentApi';
import {DeploymentPlatformApi} from './api/DeploymentPlatformApi';
import {GitCredentialsApi} from './api/GitCredentialsApi';
import {ServiceApi} from './api/ServiceApi';
import {ServiceRegistryApi} from './api/ServiceRegistryApi';
import {TeamApi} from './api/TeamApi';
import {UserApi} from './api/UserApi';
import {WorkflowApi} from './api/WorkflowApi';

/**
* An_API_for_accessing_the_SmartCLIDE_database___A_Keycloak_token_is_required_Authorization_Bearer_Token_for_accessing_the_API_outside_the_AWS_cluster.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var SmartClideDbApi = require('index'); // See note below*.
* var xxxSvc = new SmartClideDbApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new SmartClideDbApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new SmartClideDbApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new SmartClideDbApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The CiManager model constructor.
     * @property {module:model/CiManager}
     */
    CiManager,

    /**
     * The Deployment model constructor.
     * @property {module:model/Deployment}
     */
    Deployment,

    /**
     * The DeploymentPlatform model constructor.
     * @property {module:model/DeploymentPlatform}
     */
    DeploymentPlatform,

    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error,

    /**
     * The ErrorError model constructor.
     * @property {module:model/ErrorError}
     */
    ErrorError,

    /**
     * The GitCredentials model constructor.
     * @property {module:model/GitCredentials}
     */
    GitCredentials,

    /**
     * The Service model constructor.
     * @property {module:model/Service}
     */
    Service,

    /**
     * The ServiceRegistry model constructor.
     * @property {module:model/ServiceRegistry}
     */
    ServiceRegistry,

    /**
     * The Team model constructor.
     * @property {module:model/Team}
     */
    Team,

    /**
     * The User model constructor.
     * @property {module:model/User}
     */
    User,

    /**
     * The Workflow model constructor.
     * @property {module:model/Workflow}
     */
    Workflow,

    /**
    * The CiManagerApi service constructor.
    * @property {module:api/CiManagerApi}
    */
    CiManagerApi,

    /**
    * The DeploymentApi service constructor.
    * @property {module:api/DeploymentApi}
    */
    DeploymentApi,

    /**
    * The DeploymentPlatformApi service constructor.
    * @property {module:api/DeploymentPlatformApi}
    */
    DeploymentPlatformApi,

    /**
    * The GitCredentialsApi service constructor.
    * @property {module:api/GitCredentialsApi}
    */
    GitCredentialsApi,

    /**
    * The ServiceApi service constructor.
    * @property {module:api/ServiceApi}
    */
    ServiceApi,

    /**
    * The ServiceRegistryApi service constructor.
    * @property {module:api/ServiceRegistryApi}
    */
    ServiceRegistryApi,

    /**
    * The TeamApi service constructor.
    * @property {module:api/TeamApi}
    */
    TeamApi,

    /**
    * The UserApi service constructor.
    * @property {module:api/UserApi}
    */
    UserApi,

    /**
    * The WorkflowApi service constructor.
    * @property {module:api/WorkflowApi}
    */
    WorkflowApi
};
