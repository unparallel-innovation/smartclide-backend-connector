/*
 * SmartCLIDE DB API
 * An API for accessing the SmartCLIDE database. (A Keycloak token is required, Authorization Bearer Token, for accessing the API outside the AWS cluster)
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The GitCredentials model module.
 * @module model/GitCredentials
 * @version 1.0
 */
export class GitCredentials {
  /**
   * Constructs a new <code>GitCredentials</code>.
   * @alias module:model/GitCredentials
   * @class
   * @param userId {String} 
   * @param type {module:model/GitCredentials.TypeEnum} 
   * @param url {String} 
   * @param username {String} 
   * @param token {String} 
   */
  constructor(userId, type, url, username, token) {
    this.userId = userId;
    this.type = type;
    this.url = url;
    this.username = username;
    this.token = token;
  }

  /**
   * Constructs a <code>GitCredentials</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/GitCredentials} obj Optional instance to populate.
   * @return {module:model/GitCredentials} The populated <code>GitCredentials</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new GitCredentials();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('user_id'))
        obj.userId = ApiClient.convertToType(data['user_id'], 'String');
      if (data.hasOwnProperty('type'))
        obj.type = ApiClient.convertToType(data['type'], 'String');
      if (data.hasOwnProperty('url'))
        obj.url = ApiClient.convertToType(data['url'], 'String');
      if (data.hasOwnProperty('username'))
        obj.username = ApiClient.convertToType(data['username'], 'String');
      if (data.hasOwnProperty('token'))
        obj.token = ApiClient.convertToType(data['token'], 'String');
    }
    return obj;
  }
}

/**
 * @member {String} id
 */
GitCredentials.prototype.id = undefined;

/**
 * @member {String} userId
 */
GitCredentials.prototype.userId = undefined;

/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
GitCredentials.TypeEnum = {
  /**
   * value: "github"
   * @const
   */
  github: "github",

  /**
   * value: "gitlab"
   * @const
   */
  gitlab: "gitlab",

  /**
   * value: "bitbucket"
   * @const
   */
  bitbucket: "bitbucket"
};
/**
 * @member {module:model/GitCredentials.TypeEnum} type
 */
GitCredentials.prototype.type = undefined;

/**
 * @member {String} url
 */
GitCredentials.prototype.url = undefined;

/**
 * @member {String} username
 */
GitCredentials.prototype.username = undefined;

/**
 * @member {String} token
 */
GitCredentials.prototype.token = undefined;

