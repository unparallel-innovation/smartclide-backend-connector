/*
 * SmartCLIDE DB API
 * An API for accessing the SmartCLIDE database. (A Keycloak token is required, Authorization Bearer Token, for accessing the API outside the AWS cluster)
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The Service model module.
 * @module model/Service
 * @version 1.0
 */
export class Service {
  /**
   * Constructs a new <code>Service</code>.
   * @alias module:model/Service
   * @class
   * @param name {String} 
   * @param userId {String} 
   * @param registryId {String} 
   * @param gitCredentialsId {String} 
   * @param url {String} 
   * @param description {String} 
   * @param isPublic {Boolean} 
   * @param licence {String} 
   * @param framework {module:model/Service.FrameworkEnum} 
   * @param created {String} 
   * @param updated {String} 
   */
  constructor(name, userId, registryId, gitCredentialsId, url, description, isPublic, licence, framework, created, updated) {
    this.name = name;
    this.userId = userId;
    this.registryId = registryId;
    this.gitCredentialsId = gitCredentialsId;
    this.url = url;
    this.description = description;
    this.isPublic = isPublic;
    this.licence = licence;
    this.framework = framework;
    this.created = created;
    this.updated = updated;
  }

  /**
   * Constructs a <code>Service</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Service} obj Optional instance to populate.
   * @return {module:model/Service} The populated <code>Service</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Service();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('user_id'))
        obj.userId = ApiClient.convertToType(data['user_id'], 'String');
      if (data.hasOwnProperty('registry_id'))
        obj.registryId = ApiClient.convertToType(data['registry_id'], 'String');
      if (data.hasOwnProperty('git_credentials_id'))
        obj.gitCredentialsId = ApiClient.convertToType(data['git_credentials_id'], 'String');
      if (data.hasOwnProperty('url'))
        obj.url = ApiClient.convertToType(data['url'], 'String');
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('is_public'))
        obj.isPublic = ApiClient.convertToType(data['is_public'], 'Boolean');
      if (data.hasOwnProperty('licence'))
        obj.licence = ApiClient.convertToType(data['licence'], 'String');
      if (data.hasOwnProperty('framework'))
        obj.framework = ApiClient.convertToType(data['framework'], 'String');
      if (data.hasOwnProperty('created'))
        obj.created = ApiClient.convertToType(data['created'], 'String');
      if (data.hasOwnProperty('updated'))
        obj.updated = ApiClient.convertToType(data['updated'], 'String');
    }
    return obj;
  }
}

/**
 * @member {String} id
 */
Service.prototype.id = undefined;

/**
 * @member {String} name
 */
Service.prototype.name = undefined;

/**
 * @member {String} userId
 */
Service.prototype.userId = undefined;

/**
 * @member {String} registryId
 */
Service.prototype.registryId = undefined;

/**
 * @member {String} gitCredentialsId
 */
Service.prototype.gitCredentialsId = undefined;

/**
 * @member {String} url
 */
Service.prototype.url = undefined;

/**
 * @member {String} description
 */
Service.prototype.description = undefined;

/**
 * @member {Boolean} isPublic
 */
Service.prototype.isPublic = undefined;

/**
 * @member {String} licence
 */
Service.prototype.licence = undefined;

/**
 * Allowed values for the <code>framework</code> property.
 * @enum {String}
 * @readonly
 */
Service.FrameworkEnum = {
  /**
   * value: "java"
   * @const
   */
  java: "java",

  /**
   * value: "spring"
   * @const
   */
  spring: "spring",

  /**
   * value: "python"
   * @const
   */
  python: "python"
};
/**
 * @member {module:model/Service.FrameworkEnum} framework
 */
Service.prototype.framework = undefined;

/**
 * @member {String} created
 */
Service.prototype.created = undefined;

/**
 * @member {String} updated
 */
Service.prototype.updated = undefined;

