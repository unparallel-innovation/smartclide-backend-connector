/*
 * SmartCLIDE DB API
 * An API for accessing the SmartCLIDE database. (A Keycloak token is required, Authorization Bearer Token, for accessing the API outside the AWS cluster)
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {DeploymentPlatform} from '../model/DeploymentPlatform';

/**
* DeploymentPlatform service.
* @module api/DeploymentPlatformApi
* @version 1.0
*/
export class DeploymentPlatformApi {

    /**
    * Constructs a new DeploymentPlatformApi. 
    * @alias module:api/DeploymentPlatformApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the deleteDeploymentPlatformItem operation.
     * @callback moduleapi/DeploymentPlatformApi~deleteDeploymentPlatformItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an DeploymentPlatform document
     * @param {String} deploymentPlatformId 
     * @param {module:api/DeploymentPlatformApi~deleteDeploymentPlatformItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDeploymentPlatformItem(deploymentPlatformId, callback) {
      
      let postBody = null;
      // verify the required parameter 'deploymentPlatformId' is set
      if (deploymentPlatformId === undefined || deploymentPlatformId === null) {
        throw new Error("Missing the required parameter 'deploymentPlatformId' when calling deleteDeploymentPlatformItem");
      }

      let pathParams = {
        'deploymentPlatformId': deploymentPlatformId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/deployment_platforms/{deploymentPlatformId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getDeploymentPlatform operation.
     * @callback moduleapi/DeploymentPlatformApi~getDeploymentPlatformCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentPlatform{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a DeploymentPlatform document
     * @param {String} deploymentPlatformId 
     * @param {module:api/DeploymentPlatformApi~getDeploymentPlatformCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getDeploymentPlatform(deploymentPlatformId, callback) {
      
      let postBody = null;
      // verify the required parameter 'deploymentPlatformId' is set
      if (deploymentPlatformId === undefined || deploymentPlatformId === null) {
        throw new Error("Missing the required parameter 'deploymentPlatformId' when calling getDeploymentPlatform");
      }

      let pathParams = {
        'deploymentPlatformId': deploymentPlatformId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeploymentPlatform;

      return this.apiClient.callApi(
        '/deployment_platforms/{deploymentPlatformId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getDeploymentPlatforms operation.
     * @callback moduleapi/DeploymentPlatformApi~getDeploymentPlatformsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DeploymentPlatform>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves one or more DeploymentPlatform documents
     * @param {module:api/DeploymentPlatformApi~getDeploymentPlatformsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getDeploymentPlatforms(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DeploymentPlatform];

      return this.apiClient.callApi(
        '/deployment_platforms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchDeploymentPlatformItem operation.
     * @callback moduleapi/DeploymentPlatformApi~patchDeploymentPlatformItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a DeploymentPlatform document
     * @param {module:model/DeploymentPlatform} body A Artist or list of DeploymentPlatform documents
     * @param {String} deploymentPlatformId 
     * @param {module:api/DeploymentPlatformApi~patchDeploymentPlatformItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    patchDeploymentPlatformItem(body, deploymentPlatformId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchDeploymentPlatformItem");
      }
      // verify the required parameter 'deploymentPlatformId' is set
      if (deploymentPlatformId === undefined || deploymentPlatformId === null) {
        throw new Error("Missing the required parameter 'deploymentPlatformId' when calling patchDeploymentPlatformItem");
      }

      let pathParams = {
        'deploymentPlatformId': deploymentPlatformId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/deployment_platforms/{deploymentPlatformId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postDeploymentPlatforms operation.
     * @callback moduleapi/DeploymentPlatformApi~postDeploymentPlatformsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates one or more DeploymentPlatform documents
     * @param {module:model/DeploymentPlatform} body A Artist or list of DeploymentPlatform documents
     * @param {module:api/DeploymentPlatformApi~postDeploymentPlatformsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postDeploymentPlatforms(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postDeploymentPlatforms");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/deployment_platforms', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}