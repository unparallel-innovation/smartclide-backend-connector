/*
 * SmartCLIDE DB API
 * An API for accessing the SmartCLIDE database. (A Keycloak token is required, Authorization Bearer Token, for accessing the API outside the AWS cluster)
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {CiManager} from '../model/CiManager';

/**
* CiManager service.
* @module api/CiManagerApi
* @version 1.0
*/
export class CiManagerApi {

    /**
    * Constructs a new CiManagerApi. 
    * @alias module:api/CiManagerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the deleteCiManagerItem operation.
     * @callback moduleapi/CiManagerApi~deleteCiManagerItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an CiManager document
     * @param {String} ciManagerId 
     * @param {module:api/CiManagerApi~deleteCiManagerItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCiManagerItem(ciManagerId, callback) {
      
      let postBody = null;
      // verify the required parameter 'ciManagerId' is set
      if (ciManagerId === undefined || ciManagerId === null) {
        throw new Error("Missing the required parameter 'ciManagerId' when calling deleteCiManagerItem");
      }

      let pathParams = {
        'ciManagerId': ciManagerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/ci_managers/{ciManagerId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getCiManagerItem operation.
     * @callback moduleapi/CiManagerApi~getCiManagerItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CiManager{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a CiManager document
     * @param {String} ciManagerId 
     * @param {module:api/CiManagerApi~getCiManagerItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getCiManagerItem(ciManagerId, callback) {
      
      let postBody = null;
      // verify the required parameter 'ciManagerId' is set
      if (ciManagerId === undefined || ciManagerId === null) {
        throw new Error("Missing the required parameter 'ciManagerId' when calling getCiManagerItem");
      }

      let pathParams = {
        'ciManagerId': ciManagerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CiManager;

      return this.apiClient.callApi(
        '/ci_managers/{ciManagerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getCiManagers operation.
     * @callback moduleapi/CiManagerApi~getCiManagersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CiManager>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves one or more CiManager documents
     * @param {module:api/CiManagerApi~getCiManagersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getCiManagers(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CiManager];

      return this.apiClient.callApi(
        '/ci_managers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchCiManagerItem operation.
     * @callback moduleapi/CiManagerApi~patchCiManagerItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a CiManager document
     * @param {module:model/CiManager} body A Artist or list of CiManager documents
     * @param {String} ciManagerId 
     * @param {module:api/CiManagerApi~patchCiManagerItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    patchCiManagerItem(body, ciManagerId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchCiManagerItem");
      }
      // verify the required parameter 'ciManagerId' is set
      if (ciManagerId === undefined || ciManagerId === null) {
        throw new Error("Missing the required parameter 'ciManagerId' when calling patchCiManagerItem");
      }

      let pathParams = {
        'ciManagerId': ciManagerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/ci_managers/{ciManagerId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postCiManagers operation.
     * @callback moduleapi/CiManagerApi~postCiManagersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates one or more CiManager documents
     * @param {module:model/CiManager} body A Artist or list of CiManager documents
     * @param {module:api/CiManagerApi~postCiManagersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postCiManagers(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postCiManagers");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/ci_managers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}